How to fix SQL injection:

Whitelist all inputs by the user; that is, we prevent the user from using 
illegal characters. Have all legal characters be:

abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
0123456789
@.-_+

Notice that we did not want to include the ' character and the = character.

Suppose that we allowed users to have the ' character in a text field. This 
means that the user may attempt to escape the query and add their own. To fix
this, we would want to use the built-in function quote_ident() and quote_lteral().
Use quote_ident() on the column names and use quote_lteral() on the input from
user. Also, we should be using the prepare() statements correctly, since we were
able to perform an SQL injection. In the prepare() statements, we should have included
preparing the username and password. Have this in conjunction with whitelisting 
characters, it would fix all of the SQL injection vulnerability that the current 
system has. 

Thus the SQL injection vulnerability has been fixed.

How to fix XSS/XSFR:

Again, whitelist all inputs by the user; that is, we prevent the user from using 
illegal characters.

Similiar to prventing SQL injection we want to prevent users from being able to
escape via xmp tags. Here, we simply use the either the htmlspecialchars() or 
htmlentities() function. These functions takes the dangerous characters and converts
them to a different readable code for the system to take to prevent have any 
XSS/XSFR vulnerabilities. 

For XSFR we can also add random page tokens for each session. Having this as a 
hidden variable whenever interacting with the page and verifying this token 
fixes XSFR.

Another vulnerability is that a user can delete any entries in the solution
database by setting expressionid to itself and the accoundid to whatever value. 
To fix this, we simply do not allow it to refer to itself. IE whitelist. 

Next we know that the passwords in the database is not hashed. Of course to
prevent more damage from happening to the server, we must hash passwords in
the database to fix sensitive data exposure. Similiarly, do not return error 
messages to the user. Returning error messages to the user gives far too much 
valuable information. Doing this further secures the server. 

Thus all vulnerabilities found by us have been fixed and the system is now far more
secure.