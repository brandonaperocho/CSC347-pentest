Vulnerability: linux single (GRUB): 
Status: 
This vulnerability has been removed from the Ubuntu804 server, as outlined in 
the tutorial, evidence of this would be that sulogin is located in /etc/rc1 
meaning its runlevel is after the system init which occurs at /etc/rc0. Thus 
system init occurs before sulogin. Note: Ubuntu does not use inittab but rather 
runlevels(eg. rc0,rc1, ...) 

Resolution: 
No action taken at this time.


Vulnerability: linux GRUB 
Status: 
This vulnerability has been removed from the Ubuntu804 server, as outlined in the 
tutorial, evidence of this is can be seen in the menu.lst file located in /boot/grub. 
The grub is password protected and hashed because inside the menu.lst file, the 
password has been hashed and is written as:
password --md5 $1$hWBPH/$Lh6Wkn4CS4te81OUMnsuN
Instead of the original:
password topsecret

Resolution: 
No action taken at this time.


Vulnerability: User tries to boot off another device (they pressed F2 during boot) (CD, USB, etc)
Status:
This vulnerability has been removed from the Ubuntu804 server, as outlined in 
the tutorial, evidence of this can be seen by attemping to boot from another device. 
The user is put into the grub which is password protected. Thus the boot sequence 
cannot be changed unless the user knows the password to the grub. Additionally, 
in the /boot/grub/menu.lst file, the default boot entry is set to 0. Meaning the 
system will be forced to boot from the HD.

Resolution: 
No action taken at this time.

Vulnerability: User opens up box, removes battery from system to clear BIOS settings
Status: This vulnerability was not removed from the Ubuntu804 server.
This vulnerability has been removed from the Ubuntu804 server, as outlined in 
the tutorial. Since this is a virutal machine we will just assume that the virutal 
machine is locked.

Resolution: No action taken at this time.


Vulnerability: set-uid/set-gid vulnerabilities
Status: This vulnerability has not been removed from the Ubuntu804 server. 
There were a few processes that do not need to be run as root and can be run 
by any user. This can be examined by finding all processes that set-uid and 
gid to 0.

Resolution: Located all set-uid and set-gid programs by typing:
find / -perm -04000 -uid 0 -print > Set-UID-root-programs
find / -perm -02000 -gid 0 -print > Set-GID-root-programs
After all set-uid and set-gid programs were found, found all processes that 
do not need to have root access inorder to run. Processes from set-uid include 
/usr/bin/procmail, /bin/ping, /bin/ping6. Processes from set-gid include all of 
/var/cache/man/*. These processes should be able run under any user and should not 
set-uid or gid to root.

Vulnerability: World writable files and directories.
Status: This vulnerability has not been removed from the Ubuntu804 server. There 
are many files and directories that can be written and read by any user. Examples 
of such files were found by executing:
find / -perm -002 -type f -ls > world-writable-files
find / -perm -002 -type d -ls > world-writable-directories

Resolution: 
First do an audit of all of the world writable directories and files by typing:
find / -perm -002 -type f -ls > world-writable-files
find / -perm -002 -type d -ls > world-writable-directories
Change the permissions of these directories and files to limit the different 
users or groups that can write/read from them. Or just make the directories 
and files read only completely with the following commands:
chmod a-w fileName
chmod 644 fileName


Vulnerability: All users can run 'cron' jobs on the system.
Status: This vulnerability has not been removed from the Ubuntu804 server. 
Currently all users can run 'cron' jobs on the system from inspection of 
/etc/cron.hours, /etc/cron.daily, /etc/cron.monthly permissions.

Resolution: Create cron.allow file in /etc and append only users that 
are apart of the root group into it. In this case the only user put into the 
file was "joe" and "root". Additionally, check for any cron jobs that do not 
belong or unknown cron jobs in the cron tab(etc/cron.*).


Vulnerability: Users can run 'at' jobs on the system.
Status: This vulnerability has not been removed from the Ubuntu804 server. 
Any user is allowed to schedule at jobs and this was tested by logging into 
each user to see if they could schedule an at job.

Resolution: Created a file in /etc called at.allow which allows only specified 
users to run at jobs. The only users added into the file were "joe" and "root" 
since they are apart of the root group. 


Vulnerability: umask is too permissive by default.
Status: This vulnerability has not been removed from the Ubuntu804 server. The 
current umask is 022 which is still too permissive, allowing any user to read 
other users data.

Resolution: Went into /etc/profile and /etc/bashrc and changed the default 
umask to 077 by modifying the line: umask 022 to be umask 077. Now the system 
is completely private, and no other user can read or write each others data.


Vulnerability: hacker can cause a core dump and then gdb it to find out how 
things work.
Status: This vulnerability has not been removed from the Ubuntu804 server. 
There was a soft cap on the core dump file but it could still be used for the 
hacker to extract information.

Resolution: I edited to /etc/security/limits.conf file to prevent the core 
dump file from containing any information by setting the size of the file to 0. 
I also removed the soft cap for the core dump file and appended this line to 
the /etc/security/limits.conf file to fix the vulnerability:
* hard core 0


Vulnerability: Hacker can DOS the system (use up resources)
Status: This vulnerability has not been removed from the Ubuntu804 server. 
Only certain groups had processes limited(faculty and student groups).

Resolution: I went into the /etc/security/limits.conf file and hard coded the 
max number of processes that can be run per user to be 30. 30 was an optimal 
choice for the max number of processes that can be run by a user due to the 
fact that most users are running ~4 processes(found using ps command). 
Currently, only two groups had their processes limited(student, faculty) but 
now all users have their process limited after the fix. I also limited the size 
of any one file to be 100MB so that the hacker cannot use large files to DOS 
the system. The following lines were appended to the /etc/security/limits.conf file:
* soft nproc 25
* hard nproc 30
* hard fsize 100000


Vulnerability: Weak passwords 
Procedure: I loaded Kali linux, copied /etc/shadow and /etc/passwd to the Kali vm
    and ran john on the unshadowed file. 
Status: This vulnerability has not been removed from the Ubuntu804 server. Found 
1 account with a weak user name and password after running john the ripper for 
aprox ~20 hours. 
Weak password account: 
	User: Joe  Password: joeeoj
Strong password accounts: 
	User: root
	User: arnold
	User: ff
	User: sid

Since joe was part of root access group, I was able to change the passwords of 
any other user.

Resolution: 
A modification to the password policy file to contain passwords that have both 
characters(uppercase and lowercase) and numbers in them with a length longer then 8 
characters. This was done by going into /etc/common-password and adding this to the file:
password requisite pam_cracklib.so try_first_pass retry=3 minlength=8
lcredit=-1 ucredit=-1 dcredit=-1 difok=4

Additionally, Users should make passwords that are easy to remember but difficult 
to guess, also never write down the password any where.